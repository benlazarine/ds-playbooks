#!/bin/bash
#
# Usage: calliope-ingest ZONE UPLOADER TARFILE
#
# ZONE is the iRODS zone. UPLOADER is the iRODS username of the user who
# uploaded the TAR file to be processed. UPLOADER must belong to ZONE. TARFILE
# is the absolute path in ZONE to the TAR file that is to be processed. It's
# base name should have the form `<collection name>-<part number>.tar`.
#
# On behalf of UPLOADER, this script extracts the contents of TARFILE into a
# collection named `<collection name>` in the same parent collection as TARFILE.
# It then deletes TARFILE. After than, it assigns the ACL of the parent
# collection to all extracted collections and data objects preserving UPLOADER's
# own permission on everything extracted.
#
# This script assumes that the executor of this script is authenicated as a
# rodsadmin user.
#
# XXX - This is a work around to the problem of not being able to extract the
#       user permissions of a collection. See
#       https://github.com/irods/irods/issues/2337.


main()
{
  local zone="$1"
  local uploader="$2"
  local tarFile="$3"

  local parentColl
  parentColl=$(dirname "$tarFile")

  local tarName
  tarName=$(basename "$tarFile" .tar)

  local coll="$parentColl"/"$tarName"

  if [[ "$coll" =~ -[0-9]+$ ]]
  then
    coll="${coll%-*}"
  fi

  if ! clientUserName="$uploader" ibun -b -x -D tar "$tarFile" "$coll"
  then
    return 1
  fi

  irm -f "$tarFile"

  ils -A "$parentColl" | mk_acl | assign_acl "$uploader"\#"$zone" "$coll"
}


assign_acl()
{
  local uploader="$1"
  local entity="$2"

  while IFS=: read -r -d ' ' user perm
  do
    if [ "$user" != "$uploader" ]
    then
      ichmod -M -r "$perm" "$user" "$entity"
    fi
  done
}


# Converts the an ACL list in the format ils -A generates into something useable
# by ichmod.
#
# In other words, it converts
#
#/zone/path/to/entity:
#       ACL - writer#zone:modify object   owner#zone:own   g:group#zone:own   reader#zone:read object
#       Inheritance - Disabled
# ...
#
# into
#
#writer#zone:write owner#zone:own group#zone:own reader#zone:read
#
mk_acl()
{
  sed --quiet --file - <(cat) <<'SED_SCRIPT'
2 {
  s/ g:/ /g
  s/read object/read/g
  s/modify object/write/g
  s/  */ /g
  s/^ ACL - //
  p
}
SED_SCRIPT
}


main "$@"
