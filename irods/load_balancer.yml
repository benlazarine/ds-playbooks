---
- name: install HAPRoxy
  hosts: load_balancer
  become: true
  vars:
    ies: "{{ groups['ies'][0] }}"
    ies_server: "{{ ies | regex_replace('\\..*') }}"
    ies_ip: "{{ lookup('dig', ies) }}"
    reconn_ports_end: "{{ hostvars[ies]._irods_server_port_range_end }}"
    reconn_ports_start: "{{ hostvars[ies]._irods_server_port_range_start }}"
  roles:
    - role: uoi-io.haproxy
      vars:
        haproxy_firewalld: false
        haproxy_selinux: false
        haproxy_global_cpu_maps:
          - 1 0
        haproxy_global_nbproc: 1
        haproxy_global_tunes:
          - tune.ssl.default-dh-param: 2048
        haproxy_default_errorfiles: []
        haproxy_default_mode: tcp
        haproxy_default_options:
          - dontlognull
          - log-separate-errors
          - tcpka
          - tcplog
        haproxy_default_timeouts:
          - connect 10s
          - client 1d
          - client-fin 2m
          - queue 10m
          - server 1d
          - server-fin 2m
        haproxy_stats: true
        haproxy_stats_address: '*'

# XXX - As of  uoi-io/ansible-haproxy version
# 2d0213a2c5b3ef10d2e4abea9ac29e19611e0090 (2017/06/06), there is no support for
# having the stats endpoint use HTTPS. This hack works around this limitation.
        haproxy_stats_port: "{{ _load_balancer_stats_port }} ssl crt {{ _load_balancer_stats_certificate }}"
        haproxy_stats_user: "{{ _load_balancer_stats_user }}"
        haproxy_stats_password: "{{ _load_balancer_stats_password }}"
        haproxy_stats_uri: /
        haproxy_stats_options:
          - refresh 10s
          - show-legends
          - hide-version
        haproxy_frontend:
          - irods_main:
              binds:
                - :{{ _load_balancer_irods_proxy_port }}
              stick_table: type ip size 100k store conn_cur
              tcp_requests:
                - connection track-sc0 src
              use_backends:
                - irods_extra_conn if { src_conn_cur ge 2 }
              default_backend: irods_single_conn
          - webdav_http:
              binds:
                - :80
              mode: http
              redirects:
                - scheme https code 301
        haproxy_backend:
          - irods_single_conn:
              options:
                - tcp-check
              tcp_checks:
                - connect
                - 'send PING\n'
                - 'expect string <MsgHeader_PI>\n<type>RODS_VERSION</type>'
              servers:
                - "{{ ies_server }} {{ ies_ip }}:1247 check"
          - irods_extra_conn:
              options:
                - tcp-check
              tcp_checks:
                - connect
                - 'send PING\n'
                - 'expect string <MsgHeader_PI>\n<type>RODS_VERSION</type>'
              servers:
                - "{{ ies_server }} {{ ies_ip }}:1247 check maxconn {{ _load_balancer_irods_extra_max_conn }}"
        haproxy_listen:
          - irods_reconn:
              binds:
                - :{{ reconn_ports_start }}-{{ reconn_ports_end }}
              servers:
                - "{{ ies_server }} {{ ies_ip }}"
          - webdav_https:
              binds:
                - :443
              options:
                - httpchk HEAD /dav/iplant/commons/cyverse_curated
              http_checks:
                - expect status 200
              servers:
                - webdav {{ lookup('dig', _webdav_host) }} check check-ssl verify none
      notify:
        - reload haproxy
      tags:
        - no_testing

  pre_tasks:
    - name: disable notifcations for testing
      set_fact:
        notifications_enabled: true
      tags:
        - no_testing

    - name: configure rsyslog to listen on UDP socket
      blockinfile:
        path: /etc/rsyslog.conf
        insertafter: '# Provides UDP syslog reception'
        marker: "# {mark} DS MANAGED BLOCK (load_balancer)"
        block: |
          $ModLoad imudp
          $UDPServerRun 514
          $UDPServerAddress 127.0.0.1
      notify:
        - restart syslog

    - name: place rsyslog config for HAProxy
      copy:
        src: files/rsyslog.d/haproxy.conf
        dest: /etc/rsyslog.d
      notify:
        - restart syslog

    - name: place logrotate config for HAProxy
      copy:
        src: files/logrotate.d/haproxy
        dest: /etc/logrotate.d

    - name: configure firewall
      blockinfile:
        path: /etc/sysconfig/iptables
        insertbefore: -A INPUT -j REJECT
        marker: "# {mark} DS MANAGED BLOCK (load_balancer)"
        content: |
          -A INPUT -m state --state NEW -p tcp -s {{ _load_balancer_irods_allowed_src }} --dport {{ _load_balancer_irods_proxy_port }} -j ACCEPT
          -A INPUT -m state --state NEW -p tcp -s {{ _load_balancer_irods_allowed_src }} --dport {{ reconn_ports_start }}:{{ reconn_ports_end }} -j ACCEPT
          -A INPUT -m state --state NEW -p tcp -s {{ _load_balancer_irods_allowed_src }} --dport 443 -j ACCEPT
          -A INPUT -m state --state NEW -p tcp -s {{ _load_balancer_irods_allowed_src }} --dport 80 -j ACCEPT
          -A INPUT -m state --state NEW -p tcp -s {{ _load_balancer_stats_allowed_src }} --dport {{ _load_balancer_stats_port }} -j ACCEPT
      notify:
        - restart firewall
      tags:
        - no_testing

  handlers:
    - name: reload haproxy
      when: notifications_enabled is defined
      service:
        name: haproxy
        state: reloaded

    - name: restart firewall
      when: notifications_enabled is defined
      service:
        name: iptables
        state: restarted

    - name: restart syslog
      when: notifications_enabled is defined
      service:
        name: rsyslog
        state: restarted
