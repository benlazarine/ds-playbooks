---
- name: install HAPRoxy
  hosts: load_balancer
  become: true
  vars:
    ies: "{{ groups['ies'][0] }}"
    ies_server: "{{ ies | regex_replace('\\..*') }}"
    ies_ip: "{{ lookup('dig', ies) }}"
    reconn_ports_end: "{{ hostvars[ies]._irods_server_port_range_end }}"
    reconn_ports_start: "{{ hostvars[ies]._irods_server_port_range_start }}"
    per_backend_maxconn: "{{ (_load_balancer_irods_max_conn | int / 2) | int }}"
  roles:
    - role: uoi-io.haproxy
      vars:
        haproxy_firewalld: false
        haproxy_selinux: false
        haproxy_global_cpu_maps:
          - 1 0
        haproxy_global_nbproc: 1
        haproxy_global_tunes: []
        haproxy_default_errorfiles: []
        haproxy_default_mode: tcp
        haproxy_default_options:
          - dontlognull
          - log-separate-errors
          - tcpka
          - tcplog
        haproxy_default_timeouts:
          - connect 10s
          - client 1d
          - client-fin 2m
          - queue 10m
          - server 1d
          - server-fin 2m
        haproxy_stats: true
        haproxy_stats_address: '*'
        haproxy_stats_port: "{{ _load_balancer_stats_port }}"
        haproxy_stats_auth: false
        haproxy_stats_uri: /
        haproxy_stats_options:
          - refresh 10s
          - show-legends
          - hide-version
        haproxy_frontend:
          - irods_main:
              binds:
                - :{{ _load_balancer_irods_proxy_port }}
              stick_table: type ip size 100k store conn_cur
              tcp_requests:
                - connection track-sc0 src
              use_backends:
                - irods_extra_conn if { src_conn_cur ge 2 }
              default_backend: irods_single_conn
          - webdav_http:
              binds:
                - :80
              mode: http
              redirect: scheme https code 301
        haproxy_backend:
          - irods_single_conn:
              servers:
                - "{{ ies_server }} {{ ies_ip }}:1247 maxconn {{ per_backend_maxconn }}"
          - irods_extra_conn:
              servers:
                - "{{ ies_server }} {{ ies_ip }}:1247 maxconn {{ per_backend_maxconn }}"
        haproxy_listen:
          - irods_reconn:
              binds:
                - :{{ reconn_ports_start }}-{{ reconn_ports_end }}
              servers:
                - "{{ ies_server }} {{ ies_ip }}"
          - webdav_https:
              binds:
                - :443
              servers:
                - webdav {{ lookup('dig', _webdav_host) }}
      notify:
        - reload haproxy
      tags:
        - no_testing

  pre_tasks:
    - name: disable notifcations for testing
      set_fact:
        notifications_enabled: true
      tags:
        - no_testing

    - name: generate an OpennSSL private key for Let's Encrypt
      openssl_privatekey:
        path: /etc/pki/tls/private/account.key

    - name: generate an OpenSSL private key for CSR
      openssl_privatekey:
        path: /etc/pki/tls/private/localhost.key

    - name: generate on OpenSSL CSR
      openssl_csr:
        path: /etc/pki/tls/private/localhost.csr
        privatekey_path: /etc/pki/tls/private/localhost.key

# TODO learn how Let's Encrypt works

    - name: Create a challenge for the load_balancer host using an account key
      letsencrypt:
        account_email: core-sw@cyverse.org
        account_key_src: /etc/pki/tls/private/account.key
        acme_directory: https://acme-v01.api.letsencrypt.org/directory
        csr: /etc/pki/tls/private/localhost.csr
        dest: /etc/pki/tls/certs/localhost.crt
      register: challenge

    - debug:
        var: challenge

    - fail:

    - letsencrypt:
        account_key_src: /etc/pki/tls/private/account.key
        csr: /etc/pki/tls/private/localhost.csr
        dest: /etc/pki/tls/certs/localhost.crt
        fullchain_dest: /etc/pki/tls/certs/localhost-fullchain.crt
        chain_dest: /etc/pki/tls/certs/localhost-intermediate.crt
        data: ''

# See https://www.digitalocean.com/community/tutorials/how-to-secure-haproxy-with-let-s-encrypt-on-centos-7
# TODO certbot certonly --standalone --preferred-challenges http --http-01-port 80 -d moby.cyverse.org
#      < core-sw@cyverse.org
#      < Agree
#      < No
#      > /etc/letsencrypt/live/moby.cyverse.org
#      > 2018-12-05


# TODO mkdir -p /etc/haproxy/certs
# TODO cat /etc/letsencrypt/live/moby.cyverse.org/fullchain.pem /etc/letsencrypt/live/moby.cyverse.org/privkey.pem > /etc/haproxy/certs/moby.cyverse.org.pem
# TODO update /etc/happroxy/haproxy.cfo
#      * global: tune.ssl.default-dh-param 2048
#      * listen stats: bind *:81 ssl crt /etc/haproxy/certs/moby.cyverse.org.pem

    - name: configure rsyslog to listen on UDP socket
      blockinfile:
        path: /etc/rsyslog.conf
        insertafter: '# Provides UDP syslog reception'
        marker: "# {mark} DS MANAGED BLOCK (load_balancer)"
        block: |
          $ModLoad imudp
          $UDPServerRun 514
          $UDPServerAddress 127.0.0.1
      notify:
        - restart syslog

    - name: place rsyslog config for HAproxy
      copy:
        src: files/haproxy.conf
        dest: /etc/rsyslog.d
      notify:
        - restart syslog

  post_tasks:
    - name: configure firewall
      blockinfile:
        path: /etc/sysconfig/iptables
        insertbefore: -A INPUT -j REJECT
        marker: "# {mark} DS MANAGED BLOCK (load_balancer)"
        content: |
          -A INPUT -m state --state NEW -p tcp -s {{ _load_balancer_irods_allowed_src }} --dport {{ _load_balancer_irods_proxy_port }} -j ACCEPT
          -A INPUT -m state --state NEW -p tcp -s {{ _load_balancer_irods_allowed_src }} --dport {{ reconn_ports_start }}:{{ reconn_ports_end }} -j ACCEPT
          -A INPUT -m state --state NEW -p tcp -s {{ _load_balancer_irods_allowed_src }} --dport 443 -j ACCEPT
          -A INPUT -m state --state NEW -p tcp -s {{ _load_balancer_irods_allowed_src }} --dport 80 -j ACCEPT
          -A INPUT -m state --state NEW -p tcp -s {{ _load_balancer_stats_allowed_src }} --dport {{ _load_balancer_stats_port }} -j ACCEPT
      notify:
        - restart firewall
      tags:
        - no_testing

  handlers:
    - name: reload haproxy
      when: notifications_enabled is defined
      service:
        name: haproxy
        state: reloaded

    - name: restart firewall
      when: notifications_enabled is defined
      service:
        name: iptables
        state: restarted

    - name: restart syslog
      when: notifications_enabled is defined
      service:
        name: rsyslog
        state: restarted
