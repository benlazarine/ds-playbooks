---
- name: Install and configure apache
  hosts: webdav
  become: true
  roles:
    - role: geerlingguy.apache
      vars:
        apache_ssl_cipher_suite: "HIGH:3DES:!aNULL:!MD5:!SEED:!IDEA"
        apache_global_vhost_settings: |
          LoadModule log_forensic_module modules/mod_log_forensic.so
          LoadModule proxy_html_module modules/mod_proxy_html.so
          LoadModule unique_id_module modules/mod_unique_id.so

          ForensicLog "logs/forensic_log"

          CacheRoot {{ _webdav_cache_dir }}
          CacheDirLevels 2
          CacheDirLength 1
          CacheMaxFileSize {{ (_webdav_cache_max_file_size | int) * 2**20 }}
        apache_vhosts:
          - servername: "{{ inventory_hostname }}"
            extra_parameters: |
              ServerAlias {{ _canonical_hostname }}
              RedirectPermanent / https://{{ inventory_hostname }}/
            comment: Redirect HTTP to HTTPS
          - servername: 127.0.0.1
            listen_ip: 127.0.0.1
            extra_parameters: |
              CacheQuickHandler off
              CacheEnable disk /dav
              CacheLock on
              CacheLockPath /tmp/mod_cache-lock
              CacheLockMaxAge 5
              CacheHeader on
              CacheIgnoreHeaders Set-Cookie
              CacheLastModifiedFactor 0.5

              ExpiresActive on

              Header merge Cache-Control public
              Header set Access-Control-Allow-Headers "Range"
              Header set Access-Control-Allow-Methods "GET, HEAD, OPTIONS"
              Header set Access-Control-Allow-Origin "*"
            comment: The WebDAV host
            locations:
              - path: /dav/{{ _irods_zone_name }}/commons/community_released
                comment: Anonymous read-only access to the community released data
                extra_parameters: |
                  {% from 'davrods.j2' import davrods with context %}
                  RedirectPermanent \
                    /dav/{{ _irods_zone_name }}/commons/community_released/commons_repo/curated \
                    /dav/{{ _irods_zone_name }}/commons/cyverse_curated

                  {{ davrods('/' ~ _irods_zone_name ~ '/home/shared', 'community-head.html', 365,
                             30) }}
              - path: /dav/{{ _irods_zone_name }}/commons/cyverse_curated
                comment: Anonymous read-only access to the data curated by CyVerse
                extra_parameters: |
                  {% from 'davrods.j2' import davrods with context %}
                  {{ davrods('/' ~ _irods_zone_name ~ '/home/shared/commons_repo/curated',
                             'community-head.html', 365, 30) }}
              - path: /dav/{{ _irods_zone_name }}/home
                comment: Authenticated read-write access to the home collection
                extra_parameters: |
                  {% from 'davrods.j2' import davrods with context %}
                  RedirectPermanent /dav/{{ _irods_zone_name }}/home/shared \
                                    /dav/{{ _irods_zone_name }}/projects

                  {{ davrods('Home', 'home-head.html', 30, 7,
                       [ 'expr %{REQUEST_URI} !~ m#^/dav/' ~ _irods_zone_name ~ '/home(/[^/]*/?)?$# || %{REMOTE_USER} != "anonymous"',
                         'valid-user' ]) }}
              - path: /dav/{{ _irods_zone_name }}/projects
                comment: Authenticated read-write access to the project folders
                extra_parameters: |
                  {% from 'davrods.j2' import davrods with context %}
                  {{ davrods('/' ~ _irods_zone_name ~ '/home/shared', 'projects-head.html', 30, 7,
                       [ 'valid-user' ]) }}
        apache_vhosts_ssl:
          - servername: "{{ inventory_hostname }}"
            certificate_file: "{{ _webdav_tls_cert_file }}"
            certificate_key_file: "{{ _webdav_tls_key_file }}"
            certificate_chain_file: "{{ _webdav_tls_chain_file }}"
            extra_parameters: |
              ServerAlias {{ _canonical_hostname }}
              ErrorLog logs/ssl_error_log

              CustomLog logs/ssl_access_log "%t %h \"%r\" %>s %b %D %L %{forensic-id}n"

              CustomLog logs/ssl_request_log "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b %{forensic-id}n"

              LogLevel warn

              BrowserMatch "MSIE [2-5]" nokeepalive ssl-unclean-shutdown downgrade-1.0 force-response-1.0

              <If "%{HTTP:Range} == 'bytes=0-'">
                # Remove the range header if requesting the whole file so that the response will
                # still be cached.
                RequestHeader unset Range
              </If>
              <Elseif "-n %{HTTP:Range}">
                # To prevent davrods from crashing, tell it not to cache partial responses
                RequestHeader merge Cache-Control no-store
              </Elseif>

              ProxyErrorOverride On
              ProxyPreserveHost On

              ProxyHTMLEnable On
              ProxyHTMLLinks a href
              ProxyHTMLLinks base href

              Header edit Location ^http: https:
            comment: This proxy handles TLS, corrects requests, enables caching, and anonymous access for XMLHttpRequests
            locations:
              - path: /dav
                extra_parameters: |
                  ProxyPass http://127.0.0.1/dav
                  ProxyPassReverse http://127.0.0.1/dav

                  ProxyHTMLURLMap ^http:(//[^/]+/dav/) https:$1 [R]

              # TODO consider moving this into 127.0.0.1 vhost it might simplify the URL rewrites
              # TODO consider using ansible to generate separate davrods services for /dav-anon
              - path: /dav-anon
                extra_parameters: |
                  RequestHeader set Authorization "Basic {{ 'anonymous' | b64encode }}"

                  ProxyPass http://127.0.0.1/dav
                  ProxyPassReverse http://127.0.0.1/dav

                  ProxyHTMLURLMap ^http:(//[^/]+/dav/) https:$1 [lR]
                  ProxyHTMLURLMap ^((https://)?[^/]*)/dav/ $1/dav-anon/ [R]

                  Header edit Location ^(.*)/dav $1/dav-anon
        apache_vhosts_template: ../../templates/webdav/vhosts.conf.j2
      tags:
        - no_testing

  pre_tasks:
    - name: enable notifcations when not testing
      set_fact:
        notifications_enabled: true
      tags:
        - no_testing

    - name: install mod_proxy_html
      package:
        name: mod_proxy_html

    - name: install mod_ssl
      package:
        name: mod_ssl

    - include_tasks: tasks/install_irods_pkg.yml
      vars:
        os: centos{{ ansible_distribution_major_version }}
        pkg: irods-icommands
        pkg_ver: "{{ _irods_version }}"

    - include_tasks: tasks/install_irods_pkg.yml
      vars:
        os: centos{{ ansible_distribution_major_version }}
        pkg: irods-runtime
        pkg_ver: "{{ _irods_version }}"

    - name: install davrods
      yum:
        name: https://github.com/UtrechtUniversity/davrods/releases/download/4.1_1.4.1/davrods-4.1_1.4.1-1.el7.centos.x86_64.rpm

    - include_role:
        name: cyverse.irods-cfg
        tasks_from: client.yml
      vars:
        irods_cfg_environment_file: etc/httpd/irods/irods_environment.json
        irods_cfg_chown: false
        irods_cfg_host: "{{ _irods_ies }}"
        irods_cfg_zone_name: "{{ _irods_zone_name }}"
        irods_cfg_zone_user: anonymous
        irods_cfg_home: /{{ _irods_zone_name }}

    - include_tasks: tasks/mk_webdav_dir_head.yml
      vars:
        head_dav_base: "{{ _irods_zone_name }}/{{ item.base }}"
        head_file: "{{ item.file }}"
      with_items:
        - { file: "home-head.html", base: "home" }
        - { file: "projects-head.html", base: "projects" }
        - { file: "community-head.html", base: "commons/community_released" }
        - { file: "curated-head.html", base: "commons/cyverse_curated" }

    - name: create content directories
      file:
        path: /var/www/html/dav/{{ _irods_zone_name }}/commons
        recurse: true
        state: directory

    - name: add root web page
      copy:
        src: files/webdav/index.html
        dest: /var/www/html/index.html

    - name: add dav web page
      template:
        src: templates/webdav/dav-index.html.j2
        dest: /var/www/html/dav/index.html

    - name: add zone web page
      template:
        src: templates/webdav/zone-index.html.j2
        dest: /var/www/html/dav/{{ _irods_zone_name }}/index.html

    - name: add commons web page
      template:
        src: templates/webdav/commons-index.html.j2
        dest: /var/www/html/dav/{{ _irods_zone_name }}/commons/index.html

    - name: create directory for cache
      file:
        path: "{{ _webdav_cache_dir }}"
        state: directory
        owner: apache
        group: apache

  post_tasks:
    - name: configure htcacheclean
      template:
        src: templates/webdav/htcacheclean.j2
        dest: /etc/sysconfig/htcacheclean
      notify:
        - restart htcacheclean

    - name: create apache systemd service dependencies directory
      file:
        path: /etc/systemd/system/httpd.service.requires
        recurse: true
        state: directory

    - name: ensure htcacheclean runs when apache run
      file:
        path: /etc/systemd/system/httpd.service.requires/htcacheclean.service
        src: /usr/lib/systemd/system/htcacheclean.service
        state: link

    - name: open HTTP connection in firewall
      blockinfile:
        path: /etc/sysconfig/iptables
        insertbefore: -A INPUT -j REJECT
        marker: "# {mark} DS MANAGED BLOCK (webdav)"
        content: |
          -A INPUT -m state --state NEW -p tcp --dport 80 -j ACCEPT
          -A INPUT -m state --state NEW -p tcp --dport 443 -j ACCEPT
      notify: restart firewall

  handlers:
    - name: restart firewall
      when: notifications_enabled is defined
      service:
        name: iptables
        state: restarted

    - name: restart htcacheclean
      when: notifications_enabled is defined
      service:
        name: htcacheclean
        state: restarted
