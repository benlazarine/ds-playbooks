#! /bin/bash

readonly ExecName=$(basename "$0")


show_help()
{
  cat <<EOF

$ExecName

Usage:
  $ExecName [options] <playbook_folder>

test Data Store playbooks

Parameters:
  <playbook_folder>  the path to the root directory for a collection of
                     playbooks

Options:
  -p, --playbook <playbook>  the path to the playbook to test relative to
                             <playbook_folder>.

  -h, --help     show help and exit
  -i, --inspect  after running the playbook, open shell that allows manual
                 inspection of the configuration files, vaults, and logs

Summary:
This script runs a playbook with in the testing environment. If no playbook is
provided, it will attempt to run the playbook <playbook_folder>/main.yml.
EOF
}


readonly BaseDir=$(dirname $(readlink -f "$0"))
readonly Cfg="$BaseDir"/config.inc
readonly DefaultPlaybook=main.yml


main()
{
  local doInspect=false

  if ! opts=$(getopt --name "$ExecName" --longoptions help,inspect,playbook: --options hip: -- "$@")
  then
    exit_with_help
  fi

  eval set -- "$opts"

  while true
  do
    case "$1" in
      -h|--help)
        show_help
        exit 0
        ;;
      -i|--inspect)
        doInspect=true
        shift
        ;;
      -p|--playbook)
        local playbookInput="$2"
        shift 2
        ;;
      --)
        shift
        break
        ;;
      *)
        exit_with_help
        ;;
    esac
  done

  if [ "$#" -lt 1 ]
  then
    exit_with_help
  fi

  local playbooks="$1"

  if ! [[ "$playbooks" =~ ^/ ]]
  then
    playbooks="$(pwd)"/"$playbooks"
  fi

  local playbook
  if ! playbook=$(resolve_playbook "$playbooks" "$playbookInput")
  then
    exit 1
  fi

  do_run "$doInspect" "$playbooks" "$playbook"
}


do_run()
{
  local doInspect="$1"
  local playbooks="$2"
  local playbook="$3"

  if "$BaseDir"/env/controller "$Cfg" start
  then
    "$BaseDir"/ansible-tester/run "$doInspect" "$playbooks" "$playbook"
  fi

  "$BaseDir"/env/controller "$Cfg" stop
}


exit_with_help()
{
  show_help >&2
  exit 1
}


resolve_playbook()
{
  local playbooks="$1"
  local playbook="$2"

  if ! [ -d "$playbooks" ]
  then
    printf '%s is not a directory\n' "$playbooks" >&2
    return 1
  fi

  : ${playbook:=$DefaultPlaybook}

  if [[ "$playbook" != *.* ]]
  then
    playbook="$playbook".yml
  fi

  if ! [ -f "$playbooks"/"$playbook" ]
  then
    printf 'The playbook %s/%s does not exist\n' "$playbooks" "$playbook" >&2
    return 1
  fi

  printf '%s' "$playbook"
}


set -e
. "$Cfg"
main "$@"
