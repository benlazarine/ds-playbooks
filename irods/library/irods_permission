#!/bin/bash
#
# An ansible module for assigning permissions to data objects and collections
#
# Module Name:
#  irods_permission
#
# Required Variables:
#  subject     the user or group receiving the permission
#  permission  the permission being received (null|read|write|own)
#  object      the absolute path to the collection or data object being granted
#              permission on
#
# Optional Variables:
#  recursive   if the object is a collection, whether or not the subject should
#              be granted the same permission on everything in the collection.
#              The default is false.


main()
{
  local varFile="$1"

  local subject
  local permission
  local object
  local recursive
  . "$varFile"

  local var
  for var in subject permission object
  do
    require "$var"
  done

  permission="${permission,,}"

  : "${recursive=false}"
  recursive="${recursive,,}"

  local objectType
  objectType=$(type "$object")

  if [ "$objectType" = 'data object' ]
  then
    local currentPerm
    currentPerm=$(data_permission "$subject" "$object")

    if [ "$currenPerm" = "$permission" ]
    then
      succeed false
    fi

    local errMsg
    if ! errMsg=$(ichmod -M "$permission" "$subject" "$object")
    then
      fail "$errMsg"
    fi

    succeed true
  else
    local currentPerm
    currentPerm=$(collection_permission "$subject" "$object")

    if [ "$currenPerm" = "$permission" -a "$recursive" = false ]
    then
      succeed false
    fi
XXX This is broken from here down
    if [ "$recursive" = true ]
    then


    fi
    local errMsg
    if ! errMsg=$(ichmod -M "$permission" "$subject" "$object")
    then
      fail "$errMsg"
    fi

    succeed true
  else
    succeed true
  fi
}


type()
{
  local object="$1"

  local collId
  collId=$(quest "select COLL_ID where COLL_NAME = '$object'")

  if [ -n "$collId" ]
  then
    printf collection
  else
    printf 'data object'
  fi
}


collection_permission()
{
  local subject="$1"
  local collPath="$2"

  local permission
# XXX - This can't bee done due to https://github.com/irods/irods/issues/2337.
#       It is still present in 4.2.3.
# permission=$(quest
#   "select COLL_ACCESS_NAME where COLL_ID = '$objectId' and USER_NAME = '$subject'")
  local subjectId
  subjectId=$(quest "select USER_ID where USER_NAME = '$subject'")

  permission=$(quest
    "select COLL_ACCESS_NAME where COLL_NAME = '$collPath' and COLL_ACCESS_USER_ID = '$subjectId'")
# XXX - ^^^

  if [ -z "$permission" ]
  then
    permission=null
  fi

  printf '%s' "$permission"
}


data_permission()
{
  local subject="$1"
  local dataPath="$2"

  local collPath
  collPath=$(dirname "$dataPath")

  local dataName
  dataName=$(basename "$dataPath")

  local permission
  permission=$(quest
    "select DATA_ACCESS_NAME
     where COLL_NAME = '$collPath' and DATA_NAME = '$dataName' and USER_NAME = '$subject'")
  fi

  if [ -z "$permission" ]
  then
    permission=null
  fi

  TODO map rest of permissions
  printf '%s' "$permission"
}


count_permissions()
{
  local subject="$1"
  local permission="$2"
  local parentColl="$3"

  if [ "$permission" != null ]
  then
    local collCount
    collCount=$(quest \
      "select count(COLL_ID)
       where COLL_NAME like '$parentColl/%'
         and USER_NAME = '$subject'
         and COLL_ACCESS_NAME = '$permission'")

    local dataCount
    dataCount=$(quest \
                  "select DATA_ID
                   where COLL_NAME like '$parentColl/%'
                     and USER_NAME = '$subject'
                     and DATA_ACCESS_NAME = '$permission'" \
      | wc --lines)

    printf '%s' $((collCount + dataCount))
  else
    local allCollCount
    allCollCount=$(iquest "select count(COLL_ID) where COLL_NAME like '$parentColl/%'")

    local permCollCount
    permCollCount=$(iquest \
      "select count(COLL_ACCESS_COLL_ID)
       where COLL_NAME like '$parentColl/%' and USER_NAME = '$subject'")

    local collCount=$((allCollCount - permCollCount))

    local allDataCount
    allDataCount=$(iquest "select DATA_ID where COLL_NAME like '$parentColl/$'" | wc --lines)

    fail TODO compute permDataCount and dataCount and return total
  fi
}


quest()
{
  local query="$*"

  local response
  if ! response=$(iquest --no-page '%s' "$query")
  then
    fail "couldn't connect to iRODS"
  fi

  if ! [[ "$response" =~ ^CAT_NO_ROWS_FOUND ]]
  then
    printf '%s' "$response"
  fi
}


require()
{
  local var="$1"

  if [ -z "${!var}" ]
  then
    fail "variable '$var' must be defined"
  fi
}


fail()
{
  local msg="$*"

  # shellcheck disable=SC2016
  jq --compact-output --monochrome-output --null-input --arg msg "$msg" \
     '{failed: true, msg: $msg}' \
    >&2

  exit 1
}


succeed()
{
  local changed="$1"

  # shellcheck disable=SC2016
  jq --compact-output --monochrome-output --null-input --arg changed "$changed" \
     '{changed: ($changed == "true")}' \
    >&2

  exit 0
}


set -e
main "$@" 2>&1
